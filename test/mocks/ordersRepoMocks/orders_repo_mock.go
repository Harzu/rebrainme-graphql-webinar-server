// Code generated by MockGen. DO NOT EDIT.
// Source: ./../internal/repositories/orders/repository.go

// Package ordersRepoMocks is a generated GoMock package.
package ordersRepoMocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entities "webinar/graphql/server/internal/entities"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method
func (m *MockRepository) InsertOrder(ctx context.Context, customerID int64, productIds []int64, totalPrice int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, customerID, productIds, totalPrice)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder
func (mr *MockRepositoryMockRecorder) InsertOrder(ctx, customerID, productIds, totalPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockRepository)(nil).InsertOrder), ctx, customerID, productIds, totalPrice)
}

// FindOrdersByCustomerId mocks base method
func (m *MockRepository) FindOrdersByCustomerId(ctx context.Context, customerId int64) (entities.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByCustomerId", ctx, customerId)
	ret0, _ := ret[0].(entities.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByCustomerId indicates an expected call of FindOrdersByCustomerId
func (mr *MockRepositoryMockRecorder) FindOrdersByCustomerId(ctx, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByCustomerId", reflect.TypeOf((*MockRepository)(nil).FindOrdersByCustomerId), ctx, customerId)
}
