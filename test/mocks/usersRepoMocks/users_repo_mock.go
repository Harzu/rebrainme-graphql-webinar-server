// Code generated by MockGen. DO NOT EDIT.
// Source: ./../internal/repositories/users/repository.go

// Package usersRepoMocks is a generated GoMock package.
package usersRepoMocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	entities "webinar/graphql/server/internal/entities"
	model "webinar/graphql/server/internal/graph/model"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertOrUpdateUser mocks base method
func (m *MockRepository) InsertOrUpdateUser(ctx context.Context, tx *sqlx.Tx, createUserInput *model.CreateUserInput) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateUser", ctx, tx, createUserInput)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdateUser indicates an expected call of InsertOrUpdateUser
func (mr *MockRepositoryMockRecorder) InsertOrUpdateUser(ctx, tx, createUserInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateUser", reflect.TypeOf((*MockRepository)(nil).InsertOrUpdateUser), ctx, tx, createUserInput)
}

// InsertOrUpdateCustomerUser mocks base method
func (m *MockRepository) InsertOrUpdateCustomerUser(ctx context.Context, createCustomerInput *model.CreateCustomerInput) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateCustomerUser", ctx, createCustomerInput)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InsertOrUpdateCustomerUser indicates an expected call of InsertOrUpdateCustomerUser
func (mr *MockRepositoryMockRecorder) InsertOrUpdateCustomerUser(ctx, createCustomerInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateCustomerUser", reflect.TypeOf((*MockRepository)(nil).InsertOrUpdateCustomerUser), ctx, createCustomerInput)
}

// FindUserSessionInfoByCredentials mocks base method
func (m *MockRepository) FindUserSessionInfoByCredentials(ctx context.Context, email, passwordHash string) (entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserSessionInfoByCredentials", ctx, email, passwordHash)
	ret0, _ := ret[0].(entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserSessionInfoByCredentials indicates an expected call of FindUserSessionInfoByCredentials
func (mr *MockRepositoryMockRecorder) FindUserSessionInfoByCredentials(ctx, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserSessionInfoByCredentials", reflect.TypeOf((*MockRepository)(nil).FindUserSessionInfoByCredentials), ctx, email, passwordHash)
}

// FindCustomerByUserId mocks base method
func (m *MockRepository) FindCustomerByUserId(ctx context.Context, userId int64) (entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByUserId", ctx, userId)
	ret0, _ := ret[0].(entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByUserId indicates an expected call of FindCustomerByUserId
func (mr *MockRepositoryMockRecorder) FindCustomerByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByUserId", reflect.TypeOf((*MockRepository)(nil).FindCustomerByUserId), ctx, userId)
}
