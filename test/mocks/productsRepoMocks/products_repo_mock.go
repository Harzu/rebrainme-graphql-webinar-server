// Code generated by MockGen. DO NOT EDIT.
// Source: ./../internal/repositories/products/repository.go

// Package productsRepoMocks is a generated GoMock package.
package productsRepoMocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entities "webinar/graphql/server/internal/entities"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertOrUpdateProduct mocks base method
func (m *MockRepository) InsertOrUpdateProduct(ctx context.Context, name string, price int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateProduct", ctx, name, price)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrUpdateProduct indicates an expected call of InsertOrUpdateProduct
func (mr *MockRepositoryMockRecorder) InsertOrUpdateProduct(ctx, name, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateProduct", reflect.TypeOf((*MockRepository)(nil).InsertOrUpdateProduct), ctx, name, price)
}

// FindProductsByIds mocks base method
func (m *MockRepository) FindProductsByIds(ctx context.Context, productIds []int64) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByIds", ctx, productIds)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByIds indicates an expected call of FindProductsByIds
func (mr *MockRepositoryMockRecorder) FindProductsByIds(ctx, productIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByIds", reflect.TypeOf((*MockRepository)(nil).FindProductsByIds), ctx, productIds)
}

// FindProductsByOrdersMap mocks base method
func (m *MockRepository) FindProductsByOrdersMap(ctx context.Context, orderIds []int64) (map[int64][]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByOrdersMap", ctx, orderIds)
	ret0, _ := ret[0].(map[int64][]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByOrdersMap indicates an expected call of FindProductsByOrdersMap
func (mr *MockRepositoryMockRecorder) FindProductsByOrdersMap(ctx, orderIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByOrdersMap", reflect.TypeOf((*MockRepository)(nil).FindProductsByOrdersMap), ctx, orderIds)
}
